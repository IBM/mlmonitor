# SPDX-License-Identifier: Apache-2.0
from os.path import join, exists, dirname
import ibm_watson_machine_learning
import json
import os
import sys

from mlmonitor.src import logger, PROJECT_ROOT
from mlmonitor.src.wml import wml_client, WML_SPACE_ID


def create_package_extension(
    wml_client: ibm_watson_machine_learning.APIClient,
    name: str,
    descr: str,
    path: str,
    type: str,
) -> tuple[str, str, dict]:
    """
    The create_package_extension function creates a package extension with the specified name, description, and path.
    It returns the uid of the created package extension as well as its URL.

    :param wml_client:ibm_watson_machine_learning.APIClient: Watson Machine Learning Client
    :param name:str: Name of the package extension to create
    :param descr:str: description of the package extension
    :param path:str: local path to the package extension file that was generated by build_custmonitor_zip
    :param type:str: Define the type of package extension
    :return: A tuple containing the uid, url and details of the package extension
    """

    meta_prop_pkg_extn = {
        wml_client.package_extensions.ConfigurationMetaNames.NAME: name,
        wml_client.package_extensions.ConfigurationMetaNames.DESCRIPTION: descr,
        wml_client.package_extensions.ConfigurationMetaNames.TYPE: type,
    }

    details = wml_client.package_extensions.store(
        meta_props=meta_prop_pkg_extn, file_path=path
    )
    uid = wml_client.package_extensions.get_uid(details)
    url = wml_client.package_extensions.get_href(details)
    return uid, url, details


def create_software_specification_extension(
    wml_client: ibm_watson_machine_learning.APIClient,
    pkg_extn_uid: str,
    name: str,
    descr: str,
    base_runtime: str = "runtime-23.1-py3.10",
) -> str:
    """
    creates a new WML software specification based on an existing one and adds a package extension to it.

    :param wml_client:ibm_watson_machine_learning.APIClient: Watson Machine Learning Client
    :param pkg_extn_uid:str: package extension uid
    :param name:str: Set the name of the software specification
    :param descr:str: Provide a description of the software specification
    :param base_runtime:str Define the base software specification to use to create software spec
    :param : Define the name of the new software specification
    :return: unique identifier assigned for the new software specification
    """
    wml_client.software_specifications.ConfigurationMetaNames.show()
    wml_client.software_specifications.list()
    # Select base software specification to extend
    base_sw_spec_uid = wml_client.software_specifications.get_uid_by_name(base_runtime)

    # Define new software specification based on base one and custom library
    meta_prop_sw_spec = {
        wml_client.software_specifications.ConfigurationMetaNames.NAME: name,
        wml_client.software_specifications.ConfigurationMetaNames.DESCRIPTION: descr,
        wml_client.software_specifications.ConfigurationMetaNames.BASE_SOFTWARE_SPECIFICATION: {
            "guid": base_sw_spec_uid
        },
    }

    sw_spec_details = wml_client.software_specifications.store(
        meta_props=meta_prop_sw_spec
    )
    sw_spec_uid = wml_client.software_specifications.get_uid(sw_spec_details)

    wml_client.software_specifications.add_package_extension(sw_spec_uid, pkg_extn_uid)

    return sw_spec_uid


def build_custmonitor_zip(version: str = "0.1") -> tuple[str, str]:
    """
    builds a zip file containing the custmonitor package to be installed in WML package and software extensions

    :param version:str=0.1: Set version of the custmonitor package to build
    :return: name of custmonitor package zip file and its path
    """

    pkg_extn_name = f"custmonitor-{version}"
    pkg_extn_path = os.path.join(PROJECT_ROOT, "dist", f"{pkg_extn_name}.zip")

    cmd = f'cd {PROJECT_ROOT} && echo "{version}" > ./version.meta && {sys.executable} setup.py sdist --formats=zip'
    logger.info(f"build_custmonitor_zip run: {cmd}")
    rc = os.system(cmd)

    if rc != 0:
        raise RuntimeError("Error building custmonitor package.")
    if not os.path.exists(pkg_extn_path):
        raise RuntimeError(f"{pkg_extn_path} does not exists.")

    return pkg_extn_name, pkg_extn_path


if __name__ == "__main__":

    wml_client.set.default_space(WML_SPACE_ID)

    wml_client.software_specifications.list()
    wml_client.package_extensions.list()

    version = "0.5"
    pkg_extn_name = f"custmonitor-{version}"
    pkg_extn_description = "Pkg extension for Custom Monitor helpers"
    pkg_extn_type = "pip_zip"
    pkg_extn_path = join(
        dirname(PROJECT_ROOT), "custmonitor", "dist", f"custmonitor-{version}.zip"
    )
    pkg_extn_uid = wml_client.package_extensions.get_uid_by_name(pkg_extn_name)

    if pkg_extn_uid == "Not Found":

        if exists(pkg_extn_path):

            pkg_extn_uid, pkg_extn_url, details = create_package_extension(
                wml_client,
                pkg_extn_name,
                pkg_extn_description,
                pkg_extn_path,
                pkg_extn_type,
            )

            print(
                f"pkg_extn_uid : {pkg_extn_uid}, "
                f"pkg_extn_url : {pkg_extn_url}, "
                f"pkg_extn_details:\n{json.dumps(details, indent=4)}"
            )
        else:
            details = wml_client.package_extensions.get_details(pkg_extn_uid)
            raise ValueError(f"{pkg_extn_path} not found with details:\n{details}")
    else:
        print(f"pkg_extn_uid found : {pkg_extn_uid}")
        details = wml_client.package_extensions.get_details(pkg_extn_uid)
        print(details)

    sw_spec_name = f"custmonitor-{version}"
    sw_sepc_decr = f"Software specification with custmonitor-{version}"
    base_sw_spec = "runtime-23.1-py3.10"

    sw_spec_uid = wml_client.software_specifications.get_uid_by_name(sw_spec_name)

    if sw_spec_uid == "Not Found":

        sw_spec_uid = create_software_specification_extension(
            wml_client, pkg_extn_uid, sw_spec_name, sw_sepc_decr, base_sw_spec
        )
        print(f"SW spec created with ID {sw_spec_uid}")

    else:
        print(f"SW spec {sw_spec_name} found : {sw_spec_uid}")
        sw_spec_details = wml_client.software_specifications.delete(
            sw_spec_uid=sw_spec_uid
        )
